stages:
- build
- test
- dockerize

default:
  cache: &global_cache
    key: $CI_COMMIT_REF_SLUG
    paths:
    - node_modules/
    - .npm/
    policy: pull-push

variables:
  JOB_STATUS: ❓

after_script:
- >
  if [ $CI_JOB_STATUS == 'success' ]; then
    JOB_STATUS=✅
    echo https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage
    echo "chat_id=$TG_CHAT_ID&text=${CI_PROJECT_NAME}/${CI_COMMIT_REF_NAME} → задание ${CI_JOB_NAME} ${JOB_STATUS}"
    curl -s  -d "chat_id=$TG_CHAT_ID&text=${CI_PROJECT_NAME}/${CI_COMMIT_REF_NAME} → задание ${CI_JOB_NAME} ${JOB_STATUS}" https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage
  else
    JOB_STATUS=❌
    curl -s  -d "chat_id=$TG_CHAT_ID&text=${CI_PROJECT_NAME}/${CI_COMMIT_REF_NAME} → задание ${CI_JOB_NAME} ${JOB_STATUS} ${CI_JOB_URL}" https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage
  fi

quasar-build:
  stage: build
  tags: &runner_tags
  - linux
  artifacts:
    when: on_success
    paths:
    - dist
  rules:
  - when: always
  before_script:
  - curl -s -d "chat_id=$TG_CHAT_ID&text=${CI_PROJECT_NAME}/${CI_COMMIT_REF_NAME} → ${GITLAB_USER_NAME} запустил задание ${CI_JOB_NAME}" https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage
  script:
  - npm ci --cache .npm --prefer-offline
  - npx quasar build

docker-build:
  dependencies:
  - quasar-build
  stage: dockerize
  tags: *runner_tags
  before_script:
  - curl -s -d "chat_id=$TG_CHAT_ID&text=${CI_PROJECT_NAME}/${CI_COMMIT_REF_NAME} → ${GITLAB_USER_NAME} запустил задание ${CI_JOB_NAME}" https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
  - |
    tag=":$CI_COMMIT_REF_SLUG"
    push_latest=false
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      push_latest=true
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = $tag and 'latest'"
    else
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
  - docker build --pull -f Dockerfile.prod -t "$CI_REGISTRY_IMAGE${tag}" .
  - docker push "$CI_REGISTRY_IMAGE${tag}"
  - |
    if [ "$push_latest" = true ]; then
      docker tag "$CI_REGISTRY_IMAGE${tag}" "$CI_REGISTRY_IMAGE:latest"
      docker push "$CI_REGISTRY_IMAGE:latest"
    fi
  rules:
   - if: $CI_PIPELINE_SOURCE == "pipeline" || $CI_PIPELINE_SOURCE == "web"
     when: never
   - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
     when: never
   - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^bugfix/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
     when: never
   - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == /^master/ && $CI_COMMIT_TAG != null
     when: always
   - if: $CI_COMMIT_BRANCH == "master"
     exists:
        - Dockerfile.prod
   - if: $CI_COMMIT_TAG
     exists:
        - Dockerfile.prod
